/*
 * generated by Xtext 2.25.0
 */
package ac.soton.xeventb.xmachine.serializer;

import ac.soton.xeventb.xmachine.services.XMachineGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class XMachineSyntacticSequencer extends AbstractSyntacticSequencer {

	protected XMachineGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Machine_InvariantsKeyword_6_2_0_q;
	protected AbstractElementAlias match_Machine_SeesKeyword_4_2_0_q;
	protected AbstractElementAlias match_Machine_VariablesKeyword_6_0_0_q;
	protected AbstractElementAlias match_XEvent_BeginKeyword_9_0_1_or_ThenKeyword_9_0_0;
	protected AbstractElementAlias match_XEvent_WhenKeyword_8_0_1_or_WhereKeyword_8_0_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (XMachineGrammarAccess) access;
		match_Machine_InvariantsKeyword_6_2_0_q = new TokenAlias(false, true, grammarAccess.getMachineAccess().getInvariantsKeyword_6_2_0());
		match_Machine_SeesKeyword_4_2_0_q = new TokenAlias(false, true, grammarAccess.getMachineAccess().getSeesKeyword_4_2_0());
		match_Machine_VariablesKeyword_6_0_0_q = new TokenAlias(false, true, grammarAccess.getMachineAccess().getVariablesKeyword_6_0_0());
		match_XEvent_BeginKeyword_9_0_1_or_ThenKeyword_9_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getXEventAccess().getBeginKeyword_9_0_1()), new TokenAlias(false, false, grammarAccess.getXEventAccess().getThenKeyword_9_0_0()));
		match_XEvent_WhenKeyword_8_0_1_or_WhereKeyword_8_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getXEventAccess().getWhenKeyword_8_0_1()), new TokenAlias(false, false, grammarAccess.getXEventAccess().getWhereKeyword_8_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Machine_InvariantsKeyword_6_2_0_q.equals(syntax))
				emit_Machine_InvariantsKeyword_6_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Machine_SeesKeyword_4_2_0_q.equals(syntax))
				emit_Machine_SeesKeyword_4_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Machine_VariablesKeyword_6_0_0_q.equals(syntax))
				emit_Machine_VariablesKeyword_6_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XEvent_BeginKeyword_9_0_1_or_ThenKeyword_9_0_0.equals(syntax))
				emit_XEvent_BeginKeyword_9_0_1_or_ThenKeyword_9_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XEvent_WhenKeyword_8_0_1_or_WhereKeyword_8_0_0.equals(syntax))
				emit_XEvent_WhenKeyword_8_0_1_or_WhereKeyword_8_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'invariants'?
	 *
	 * This ambiguous syntax occurs at:
	 *     orderedChildren+=XGroupInvariant (ambiguity) orderedChildren+=XGroupInvariant
	 */
	protected void emit_Machine_InvariantsKeyword_6_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'sees'?
	 *
	 * This ambiguous syntax occurs at:
	 *     sees+=[Context|ID] (ambiguity) sees+=[Context|ID]
	 */
	protected void emit_Machine_SeesKeyword_4_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'variables'?
	 *
	 * This ambiguous syntax occurs at:
	 *     orderedChildren+=XGroupVariable (ambiguity) orderedChildren+=XGroupVariable
	 */
	protected void emit_Machine_VariablesKeyword_6_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'then' | 'begin'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) orderedChildren+=XAction
	 *     orderedChildren+=EventSync (ambiguity) orderedChildren+=XAction
	 *     orderedChildren+=XGuard (ambiguity) orderedChildren+=XAction
	 *     orderedChildren+=XParameter (ambiguity) orderedChildren+=XAction
	 *     refines+=[Event|ID] (ambiguity) orderedChildren+=XAction
	 */
	protected void emit_XEvent_BeginKeyword_9_0_1_or_ThenKeyword_9_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'where' | 'when'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) orderedChildren+=XGuard
	 *     orderedChildren+=EventSync (ambiguity) orderedChildren+=XGuard
	 *     orderedChildren+=XParameter (ambiguity) orderedChildren+=XGuard
	 *     refines+=[Event|ID] (ambiguity) orderedChildren+=XGuard
	 */
	protected void emit_XEvent_WhenKeyword_8_0_1_or_WhereKeyword_8_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
