{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"basic_tutorial_task_1/","title":"Task 1. Create an Event-B Project","text":""},{"location":"basic_tutorial_task_1/#introduction","title":"Introduction","text":"<p>The purpose of this task is to create an Event-B project for the CamilleX constructs.</p>"},{"location":"basic_tutorial_task_1/#step-1-create-a-new-event-b-project-named-club","title":"Step 1. Create a New Event-B Project Named <code>Club</code>","text":"<ul> <li> <p>Click on the new Event-B project button on the Event-B Explorer.  (The same wizard can be invoke through the menu <code>File -&gt; New -&gt; Event-B Project</code>)</p> </li> <li> <p>From the pop-up dialog, enter <code>Club</code> as the <code>Project name</code> </p> </li> <li> <p>Click <code>Finish</code> to confirm the creation of the project. </p> </li> </ul>"},{"location":"basic_tutorial_task_1/#conclusion","title":"Conclusion","text":"<p>By now, the project <code>Club</code> should be visible in the Event-B Explorer. </p>"},{"location":"basic_tutorial_task_2/","title":"Task 2. Create an XContext","text":""},{"location":"basic_tutorial_task_2/#introduction","title":"Introduction","text":"<p>The purpose of this task is to create a simple XContext within the newly created project.</p>"},{"location":"basic_tutorial_task_2/#step-1-create-a-new-xcontext-named-coursesctxbucx","title":"Step 1. Create a New XContext Named <code>coursesCtx.bucx</code>","text":"<ul> <li> <p>Use the menu <code>File -&gt; New -&gt; Other</code> to open the <code>Select a wizard</code> dialog.</p> </li> <li> <p>On the pop-up <code>Select a wizard</code> dialog, navigate to <code>General -&gt; File</code>,   click <code>Next</code>. </p> </li> <li> <p>On the <code>Create New File</code> dialog, choose <code>Club</code> project as the parent   folder, and put <code>coursesCtx.bucx</code> as the <code>File name</code>. The file   extension <code>.bucx</code> is important to indicate that the file is an   XContext. Click <code>Finish</code> to confirm the file creation. </p> </li> <li> <p>Important: A pop-up dialog will be displayed asking to convert the <code>Club</code> project to an XText project, please answer Yes. This enables the XText builder to work automatically for converting CamilleX constructs to Rodin constructs.  (If you miss this step, you can invoke it via right click on the <code>Club</code> project from the Event-B Explorer and <code>Configure -&gt; Convert to XText Project</code>). The new created file <code>coursesCtx.bucx</code> will be opened automatically in an editor. It has some error markers and we will fix this in the next step.</p> </li> </ul>"},{"location":"basic_tutorial_task_2/#step-2-set-the-content-of-coursectxbucx","title":"Step 2. Set the Content of <code>courseCtx.bucx</code>","text":"<ul> <li>Using the editor, set the content of <code>coursesCtx.bucx</code> as follows.</li> </ul> <pre><code>context coursesCtx\nsets\n    CRS     // The set of all courses\nconstants\n    m       // The maximum number of courses\naxioms\n    @axm0_1: finite(CRS)    // There can only be a finite number of courses\n    @axm0_2: m \u2208 \u21151         // The maximum number of courses is a non-zero natural number\ntheorem @thm0_1: 0 &lt; m      // The maximum number of courses is positive\nend\n</code></pre>"},{"location":"basic_tutorial_task_2/#typesetting-mathematical-symbols","title":"Typesetting Mathematical Symbols","text":"<p>In order to typeset Event-B mathematical symbols, e.g., <code>\u21151</code>, there are three different approaches.</p> <ol> <li> <p>Using Content Assist. Content Assist can translate ASCII   characters into Unicode symbols.  For example, when typing <code>NAT</code> and invoking   content assist (e.g., on <code>Ctrl + Space</code> on Mac OS), a dropdown list will appear with options for typesetting <code>\u2115</code> and <code>\u21151</code>. </p> </li> <li> <p>Using Quick Fix. The CamilleX editor offer quick fixes for   ASCII untranslated formula. Untranslated formula are indicated by warnings   with yellow squiggly lines under the formula. Hover the mouse over   the untranslated formulae, a pop-up dialog will appear to offer to   translate the formulae. </p> </li> <li> <p>Using Symbols Table. Symbols can be inserted into the CamilleX    editor. (If the Symbols table is not visible in your Rodin, you    can open it from the menu <code>Window -&gt; Show View -&gt; Symbols</code>. </p> </li> </ol>"},{"location":"basic_tutorial_task_2/#step-3-save-the-coursesctxbucx-file","title":"Step 3. Save the <code>coursesCtx.bucx</code> file","text":"<p>Save the file <code>coursesCtx.bucx</code>, the XText builder will generate Rodin context <code>coursesCtx</code> automatically.</p>"},{"location":"basic_tutorial_task_2/#conclusion","title":"Conclusion","text":"<p>By now, the XContext \u201ccoursesCtx.bucx\u201d and the corresponding Rodin Context \u201ccoursesCtx\u201d should be visible in the Event-B Explorer. </p>"},{"location":"basic_tutorial_task_3/","title":"Task 3. Create an XMachine","text":""},{"location":"basic_tutorial_task_3/#introduction","title":"Introduction","text":"<p>The purpose of this task is to create a simple XMachine within the newly created project.</p>"},{"location":"basic_tutorial_task_3/#step-1-create-a-new-xmachine-named-coursesbumx","title":"Step 1. Create a New XMachine Named <code>courses.bumx</code>","text":"<ul> <li> <p>Use the menu <code>File -&gt; New -&gt; Other</code> to open the <code>Select a wizard</code> dialog.</p> </li> <li> <p>On the pop-up <code>Select a wizard</code> dialog, navigate to <code>General -&gt; File</code>,   click <code>Next</code>. </p> </li> <li> <p>On the <code>Create New File</code> dialog, choose <code>Club</code> project as the parent   folder, and put <code>courses.bumx</code> as the <code>File name</code>. The file   extension <code>.bumx</code> is important to indicate that the file is an   XMachine. Click <code>Finish</code> to confirm the file creation. </p> </li> </ul>"},{"location":"basic_tutorial_task_3/#step-2-set-the-content-of-coursebumx","title":"Step 2. Set the Content of <code>course.bumx</code>","text":"<ul> <li>Using the editor, set the content of <code>courses.bumx</code> as follows.</li> </ul> <pre><code>machine courses\n\nsees coursesCtx\n\nvariables\n    crs     // The set of existing courses\n\ninvariants\n    @inv0_1: crs \u2286 CRS\n\ntheorem\n    @thm0_2: finite(crs)\n\ninvariant\n    @inv0_2: card(crs) \u2264 m\n\nevent INITIALISATION\nbegin\n    @act1: crs \u2254 \u2205\nend\n\n/*\n * Event to open a set of courses using non-deterministic assignment.\n */\nevent OpenCourses\nwhen\n    @grd0_1 : card(crs) \u2260 m\n    theorem @thm0_3 : crs = CRS\nthen\n    @act0_1 : crs :\u2223 crs \u2282 crs' \u2227 card(crs') \u2264 m\nend\n\n/*\n * Event to close a set of courses using event parameters\n */\nanticipated event CloseCourses\nany cs\nwhere\n    @grd1: cs \u2286 crs\n    @grd2: cs \u2260 \u2205\nthen\n    @act1: crs \u2254 crs \u2216 cs\nend\n</code></pre>"},{"location":"basic_tutorial_task_3/#step-3-save-the-coursesctxbucx-file","title":"Step 3. Save the <code>coursesCtx.bucx</code> file","text":"<p>Save the file <code>coursesCtx.bucx</code>, the XText builder will generate Rodin context <code>coursesCtx</code> automatically.</p>"},{"location":"basic_tutorial_task_3/#conclusion","title":"Conclusion","text":"<p>By now, the XContext \u201ccoursesCtx.bucx\u201d and the corresponding Rodin Context \u201ccoursesCtx\u201d should be visible in the Event-B Explorer. </p>"},{"location":"","title":"CamilleX User Manual","text":"<p>CamilleX new constructs (called <code>XMachines</code> and <code>XContexts</code>) for <code>Event-B</code> modelling. The new constructs are text files which are automatically translated into the corresponding <code>Rodin</code>'s <code>Event-B</code> constructs (i.e., <code>Machines</code> and <code>Contexts</code>) accordingly. Facility for translating to and from <code>Rodin</code>'s components to <code>CamilleX</code> components can be invoked manually.  <code>CamilleX</code> is inspired by Camille text editor for Rodin and is based on XText technology, hence the name <code>CamilleX</code>.</p> <ul> <li>Getting Started:</li> <li>Installation: Information for installing the CamilleX feature.</li> <li>Basic tutorial: This tutorial provides a step-by-step walk-through working with CamilleX constructs.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>CamilleX is available from the main Rodin update site (under <code>CamilleX</code> category). There are two versions of the feature, the standard version for users and the SDK version for software developers which include source code.</p>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>Windows users must change the workspace text file encoding to UTF-8. This can be updated under the <code>Rodin Preferences</code> <code>General/Workspace</code> then in the <code>Text file encoding</code> section, select Other: <code>UTF-8</code>.</p>"},{"location":"installation/#important","title":"IMPORTANT","text":"<p>Currently, CamilleX not only supports standard Event-B machines and contexts, but also supports Machine Inclusion (for composition), and Record extension to the Event-B modelling language.</p> <p>Since the XContexts and XMachines are compiled to the Rodin files, the corresponding Rodin contexts and machines will be OVER-WRITTEN. Any changes in the Rodin files will not be lost.</p> <p>DO NOT USE the CamilleX if you use modelling plug-ins that use the Rodin files as source such as UML-B state-machines and class-diagrams, as the additional modelling elements will be over-written.</p>"},{"location":"en/basic_tutorial_task_1/","title":"Task 1. Create an Event-B Project","text":""},{"location":"en/basic_tutorial_task_1/#introduction","title":"Introduction","text":"<p>The purpose of this task is to create an Event-B project for the CamilleX constructs.</p>"},{"location":"en/basic_tutorial_task_1/#step-1-create-a-new-event-b-project-named-club","title":"Step 1. Create a New Event-B Project Named <code>Club</code>","text":"<ul> <li> <p>Click on the new Event-B project button on the Event-B Explorer.  (The same wizard can be invoke through the menu <code>File -&gt; New -&gt; Event-B Project</code>)</p> </li> <li> <p>From the pop-up dialog, enter <code>Club</code> as the <code>Project name</code> </p> </li> <li> <p>Click <code>Finish</code> to confirm the creation of the project. </p> </li> </ul>"},{"location":"en/basic_tutorial_task_1/#conclusion","title":"Conclusion","text":"<p>By now, the project <code>Club</code> should be visible in the Event-B Explorer. </p>"},{"location":"en/basic_tutorial_task_2/","title":"Task 2. Create an XContext","text":""},{"location":"en/basic_tutorial_task_2/#introduction","title":"Introduction","text":"<p>The purpose of this task is to create a simple XContext within the newly created project.</p>"},{"location":"en/basic_tutorial_task_2/#step-1-create-a-new-xcontext-named-coursesctxbucx","title":"Step 1. Create a New XContext Named <code>coursesCtx.bucx</code>","text":"<ul> <li> <p>Use the menu <code>File -&gt; New -&gt; Other</code> to open the <code>Select a wizard</code> dialog.</p> </li> <li> <p>On the pop-up <code>Select a wizard</code> dialog, navigate to <code>General -&gt; File</code>,   click <code>Next</code>. </p> </li> <li> <p>On the <code>Create New File</code> dialog, choose <code>Club</code> project as the parent   folder, and put <code>coursesCtx.bucx</code> as the <code>File name</code>. The file   extension <code>.bucx</code> is important to indicate that the file is an   XContext. Click <code>Finish</code> to confirm the file creation. </p> </li> <li> <p>Important: A pop-up dialog will be displayed asking to convert the <code>Club</code> project to an XText project, please answer Yes. This enables the XText builder to work automatically for converting CamilleX constructs to Rodin constructs.  (If you miss this step, you can invoke it via right click on the <code>Club</code> project from the Event-B Explorer and <code>Configure -&gt; Convert to XText Project</code>). The new created file <code>coursesCtx.bucx</code> will be opened automatically in an editor. It has some error markers and we will fix this in the next step.</p> </li> </ul>"},{"location":"en/basic_tutorial_task_2/#step-2-set-the-content-of-coursectxbucx","title":"Step 2. Set the Content of <code>courseCtx.bucx</code>","text":"<ul> <li>Using the editor, set the content of <code>coursesCtx.bucx</code> as follows.</li> </ul> <pre><code>context coursesCtx\nsets\n    CRS     // The set of all courses\nconstants\n    m       // The maximum number of courses\naxioms\n    @axm0_1: finite(CRS)    // There can only be a finite number of courses\n    @axm0_2: m \u2208 \u21151         // The maximum number of courses is a non-zero natural number\ntheorem @thm0_1: 0 &lt; m      // The maximum number of courses is positive\nend\n</code></pre>"},{"location":"en/basic_tutorial_task_2/#typesetting-mathematical-symbols","title":"Typesetting Mathematical Symbols","text":"<p>In order to typeset Event-B mathematical symbols, e.g., <code>\u21151</code>, there are three different approaches.</p> <ol> <li> <p>Using Content Assist. Content Assist can translate ASCII   characters into Unicode symbols.  For example, when typing <code>NAT</code> and invoking   content assist (e.g., on <code>Ctrl + Space</code> on Mac OS), a dropdown list will appear with options for typesetting <code>\u2115</code> and <code>\u21151</code>. </p> </li> <li> <p>Using Quick Fix. The CamilleX editor offer quick fixes for   ASCII untranslated formula. Untranslated formula are indicated by warnings   with yellow squiggly lines under the formula. Hover the mouse over   the untranslated formulae, a pop-up dialog will appear to offer to   translate the formulae. </p> </li> <li> <p>Using Symbols Table. Symbols can be inserted into the CamilleX    editor. (If the Symbols table is not visible in your Rodin, you    can open it from the menu <code>Window -&gt; Show View -&gt; Symbols</code>. </p> </li> </ol>"},{"location":"en/basic_tutorial_task_2/#step-3-save-the-coursesctxbucx-file","title":"Step 3. Save the <code>coursesCtx.bucx</code> file","text":"<p>Save the file <code>coursesCtx.bucx</code>, the XText builder will generate Rodin context <code>coursesCtx</code> automatically.</p>"},{"location":"en/basic_tutorial_task_2/#conclusion","title":"Conclusion","text":"<p>By now, the XContext \u201ccoursesCtx.bucx\u201d and the corresponding Rodin Context \u201ccoursesCtx\u201d should be visible in the Event-B Explorer. </p>"},{"location":"en/basic_tutorial_task_3/","title":"Task 3. Create an XMachine","text":""},{"location":"en/basic_tutorial_task_3/#introduction","title":"Introduction","text":"<p>The purpose of this task is to create a simple XMachine within the newly created project.</p>"},{"location":"en/basic_tutorial_task_3/#step-1-create-a-new-xmachine-named-coursesbumx","title":"Step 1. Create a New XMachine Named <code>courses.bumx</code>","text":"<ul> <li> <p>Use the menu <code>File -&gt; New -&gt; Other</code> to open the <code>Select a wizard</code> dialog.</p> </li> <li> <p>On the pop-up <code>Select a wizard</code> dialog, navigate to <code>General -&gt; File</code>,   click <code>Next</code>. </p> </li> <li> <p>On the <code>Create New File</code> dialog, choose <code>Club</code> project as the parent   folder, and put <code>courses.bumx</code> as the <code>File name</code>. The file   extension <code>.bumx</code> is important to indicate that the file is an   XMachine. Click <code>Finish</code> to confirm the file creation. </p> </li> </ul>"},{"location":"en/basic_tutorial_task_3/#step-2-set-the-content-of-coursebumx","title":"Step 2. Set the Content of <code>course.bumx</code>","text":"<ul> <li>Using the editor, set the content of <code>courses.bumx</code> as follows.</li> </ul> <pre><code>machine courses\n\nsees coursesCtx\n\nvariables\n    crs     // The set of existing courses\n\ninvariants\n    @inv0_1: crs \u2286 CRS\n\ntheorem\n    @thm0_2: finite(crs)\n\ninvariant\n    @inv0_2: card(crs) \u2264 m\n\nevent INITIALISATION\nbegin\n    @act1: crs \u2254 \u2205\nend\n\n/*\n * Event to open a set of courses using non-deterministic assignment.\n */\nevent OpenCourses\nwhen\n    @grd0_1 : card(crs) \u2260 m\n    theorem @thm0_3 : crs = CRS\nthen\n    @act0_1 : crs :\u2223 crs \u2282 crs' \u2227 card(crs') \u2264 m\nend\n\n/*\n * Event to close a set of courses using event parameters\n */\nanticipated event CloseCourses\nany cs\nwhere\n    @grd1: cs \u2286 crs\n    @grd2: cs \u2260 \u2205\nthen\n    @act1: crs \u2254 crs \u2216 cs\nend\n</code></pre>"},{"location":"en/basic_tutorial_task_3/#step-3-save-the-coursesctxbucx-file","title":"Step 3. Save the <code>coursesCtx.bucx</code> file","text":"<p>Save the file <code>coursesCtx.bucx</code>, the XText builder will generate Rodin context <code>coursesCtx</code> automatically.</p>"},{"location":"en/basic_tutorial_task_3/#conclusion","title":"Conclusion","text":"<p>By now, the XContext \u201ccoursesCtx.bucx\u201d and the corresponding Rodin Context \u201ccoursesCtx\u201d should be visible in the Event-B Explorer. </p>"},{"location":"en/","title":"CamilleX User Manual","text":"<p>CamilleX new constructs (called <code>XMachines</code> and <code>XContexts</code>) for <code>Event-B</code> modelling. The new constructs are text files which are automatically translated into the corresponding <code>Rodin</code>'s <code>Event-B</code> constructs (i.e., <code>Machines</code> and <code>Contexts</code>) accordingly. Facility for translating to and from <code>Rodin</code>'s components to <code>CamilleX</code> components can be invoked manually.  <code>CamilleX</code> is inspired by Camille text editor for Rodin and is based on XText technology, hence the name <code>CamilleX</code>.</p> <ul> <li>Getting Started:</li> <li>Installation: Information for installing the CamilleX feature.</li> <li>Basic tutorial: This tutorial provides a step-by-step walk-through working with CamilleX constructs.</li> </ul>"},{"location":"en/installation/","title":"Installation","text":"<p>CamilleX is available from the main Rodin update site (under <code>CamilleX</code> category). There are two versions of the feature, the standard version for users and the SDK version for software developers which include source code.</p>"},{"location":"en/installation/#configuration","title":"Configuration","text":"<p>Windows users must change the workspace text file encoding to UTF-8. This can be updated under the <code>Rodin Preferences</code> <code>General/Workspace</code> then in the <code>Text file encoding</code> section, select Other: <code>UTF-8</code>.</p>"},{"location":"en/installation/#important","title":"IMPORTANT","text":"<p>Currently, CamilleX not only supports standard Event-B machines and contexts, but also supports Machine Inclusion (for composition), and Record extension to the Event-B modelling language.</p> <p>Since the XContexts and XMachines are compiled to the Rodin files, the corresponding Rodin contexts and machines will be OVER-WRITTEN. Any changes in the Rodin files will not be lost.</p> <p>DO NOT USE the CamilleX if you use modelling plug-ins that use the Rodin files as source such as UML-B state-machines and class-diagrams, as the additional modelling elements will be over-written.</p>"}]}