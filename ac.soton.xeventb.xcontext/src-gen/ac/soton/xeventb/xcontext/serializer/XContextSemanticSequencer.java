/*
 * generated by Xtext 2.24.0
 */
package ac.soton.xeventb.xcontext.serializer;

import ac.soton.eventb.emf.core.extension.coreextension.CoreextensionPackage;
import ac.soton.eventb.emf.core.extension.coreextension.TypedConstant;
import ac.soton.eventb.emf.record.Field;
import ac.soton.eventb.emf.record.Record;
import ac.soton.eventb.emf.record.RecordPackage;
import ac.soton.xeventb.xcontext.services.XContextGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eventb.emf.core.CorePackage;
import org.eventb.emf.core.context.Axiom;
import org.eventb.emf.core.context.CarrierSet;
import org.eventb.emf.core.context.Constant;
import org.eventb.emf.core.context.Context;
import org.eventb.emf.core.context.ContextPackage;

@SuppressWarnings("all")
public class XContextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XContextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ContextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ContextPackage.AXIOM:
				sequence_XSingleAxiom(context, (Axiom) semanticObject); 
				return; 
			case ContextPackage.CARRIER_SET:
				sequence_XCarrierSet(context, (CarrierSet) semanticObject); 
				return; 
			case ContextPackage.CONSTANT:
				sequence_XConstant(context, (Constant) semanticObject); 
				return; 
			case ContextPackage.CONTEXT:
				sequence_XContext(context, (Context) semanticObject); 
				return; 
			}
		else if (epackage == CoreextensionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CoreextensionPackage.TYPED_CONSTANT:
				sequence_XTypedConstant(context, (TypedConstant) semanticObject); 
				return; 
			}
		else if (epackage == RecordPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RecordPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case RecordPackage.RECORD:
				sequence_XRecord(context, (Record) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (name=ID multiplicity=Multiplicity? type=FieldType)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XCarrierSet returns CarrierSet
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_XCarrierSet(ISerializationContext context, CarrierSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXCarrierSetAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XConstant returns Constant
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_XConstant(ISerializationContext context, Constant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXConstantAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XContext returns Context
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         extends+=[Context|QualifiedName]* 
	 *         (orderedChildren+=XCarrierSet | orderedChildren+=XConstant | orderedChildren+=XTypedConstant | orderedChildren+=XRecord | orderedChildren+=XSingleAxiom)*
	 *     )
	 */
	protected void sequence_XContext(ISerializationContext context, Context semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XRecord returns Record
	 *
	 * Constraint:
	 *     (name=ID subsets=[Record|ID]? (fields+=Field fields+=Field*)?)
	 */
	protected void sequence_XRecord(ISerializationContext context, Record semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XSingleAxiom returns Axiom
	 *
	 * Constraint:
	 *     (theorem?='theorem'? name=XLABEL predicate=XFormula)
	 */
	protected void sequence_XSingleAxiom(ISerializationContext context, Axiom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XTypedConstant returns TypedConstant
	 *
	 * Constraint:
	 *     (name=ID type=XType? value=XFormula?)
	 */
	protected void sequence_XTypedConstant(ISerializationContext context, TypedConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
