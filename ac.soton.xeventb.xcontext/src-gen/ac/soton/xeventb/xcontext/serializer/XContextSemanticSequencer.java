/*
 * generated by Xtext 2.25.0
 */
package ac.soton.xeventb.xcontext.serializer;

import ac.soton.eventb.emf.core.extension.coreextension.CoreextensionPackage;
import ac.soton.eventb.emf.core.extension.coreextension.TypedConstant;
import ac.soton.eventb.emf.record.Constraint;
import ac.soton.eventb.emf.record.Field;
import ac.soton.eventb.emf.record.Record;
import ac.soton.eventb.emf.record.RecordPackage;
import ac.soton.xeventb.xcontext.services.XContextGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eventb.emf.core.context.Axiom;
import org.eventb.emf.core.context.CarrierSet;
import org.eventb.emf.core.context.Constant;
import org.eventb.emf.core.context.Context;
import org.eventb.emf.core.context.ContextPackage;

@SuppressWarnings("all")
public class XContextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XContextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ContextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ContextPackage.AXIOM:
				if (rule == grammarAccess.getXAxiomRule()) {
					sequence_XAxiom(context, (Axiom) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXIndividualAxiomRule()) {
					sequence_XIndividualAxiom(context, (Axiom) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXIndividualTheoremRule()) {
					sequence_XIndividualTheorem(context, (Axiom) semanticObject); 
					return; 
				}
				else break;
			case ContextPackage.CARRIER_SET:
				if (rule == grammarAccess.getXCarrierSetRule()) {
					sequence_XCarrierSet(context, (CarrierSet) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXIndividualCarrierSetRule()) {
					sequence_XIndividualCarrierSet(context, (CarrierSet) semanticObject); 
					return; 
				}
				else break;
			case ContextPackage.CONSTANT:
				sequence_XConstant(context, (Constant) semanticObject); 
				return; 
			case ContextPackage.CONTEXT:
				sequence_XContext(context, (Context) semanticObject); 
				return; 
			}
		else if (epackage == CoreextensionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CoreextensionPackage.TYPED_CONSTANT:
				sequence_XIndividualConstant(context, (TypedConstant) semanticObject); 
				return; 
			}
		else if (epackage == RecordPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RecordPackage.CONSTRAINT:
				sequence_XConstraint(context, (Constraint) semanticObject); 
				return; 
			case RecordPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case RecordPackage.RECORD:
				sequence_XRecord(context, (Record) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (comment=STRING? name=ID multiplicity=Multiplicity? type=FieldType)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XAxiom returns Axiom
	 *
	 * Constraint:
	 *     (comment=STRING? name=XLABEL predicate=XFormula)
	 */
	protected void sequence_XAxiom(ISerializationContext context, Axiom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XCarrierSet returns CarrierSet
	 *
	 * Constraint:
	 *     (comment=STRING? name=ID)
	 */
	protected void sequence_XCarrierSet(ISerializationContext context, CarrierSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XConstant returns Constant
	 *
	 * Constraint:
	 *     (comment=STRING? name=ID)
	 */
	protected void sequence_XConstant(ISerializationContext context, Constant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XConstraint returns Constraint
	 *
	 * Constraint:
	 *     (comment=STRING? name=XLABEL predicate=XFormula)
	 */
	protected void sequence_XConstraint(ISerializationContext context, Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XContext returns Context
	 *
	 * Constraint:
	 *     (
	 *         comment=STRING? 
	 *         name=ID 
	 *         (
	 *             extends+=[Context|QualifiedName] | 
	 *             extends+=[Context|QualifiedName] | 
	 *             orderedChildren+=XCarrierSet | 
	 *             orderedChildren+=XIndividualCarrierSet | 
	 *             orderedChildren+=XConstant | 
	 *             orderedChildren+=XIndividualConstant | 
	 *             orderedChildren+=XRecord | 
	 *             orderedChildren+=XAxiom | 
	 *             orderedChildren+=XIndividualAxiom | 
	 *             orderedChildren+=XIndividualTheorem
	 *         )*
	 *     )
	 */
	protected void sequence_XContext(ISerializationContext context, Context semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XIndividualAxiom returns Axiom
	 *
	 * Constraint:
	 *     (comment=STRING? name=XLABEL predicate=XFormula)
	 */
	protected void sequence_XIndividualAxiom(ISerializationContext context, Axiom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XIndividualCarrierSet returns CarrierSet
	 *
	 * Constraint:
	 *     (comment=STRING? name=ID)
	 */
	protected void sequence_XIndividualCarrierSet(ISerializationContext context, CarrierSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XIndividualConstant returns TypedConstant
	 *
	 * Constraint:
	 *     (comment=STRING? name=ID type=XType? value=XFormula?)
	 */
	protected void sequence_XIndividualConstant(ISerializationContext context, TypedConstant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XIndividualTheorem returns Axiom
	 *
	 * Constraint:
	 *     (comment=STRING? (theorem?='theorem' | theorem?='thm') name=XLABEL predicate=XFormula)
	 */
	protected void sequence_XIndividualTheorem(ISerializationContext context, Axiom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XRecord returns Record
	 *
	 * Constraint:
	 *     (extended?='extended'? name=ID inheritsNames+=ID? (fields+=Field | constraints+=XConstraint)*)
	 */
	protected void sequence_XRecord(ISerializationContext context, Record semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
